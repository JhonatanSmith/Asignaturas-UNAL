SSE <- SSq[(k + 1)]
MSR <- SSR/k
df.error <- unlist(anova(lm.model)["Df"])[k + 1]
MSE <- SSE/df.error
F0 <- MSR/MSE
PV <- pf(F0, k, df.error, lower.tail = F)
result<-data.frame(Sum_of_Squares = format(c(SSR, SSE), digits = 6), DF = format(c(k, df.error), digits = 6),
Mean_Square = format(c(MSR, MSE), digits = 6), F_Value = c(format(F0, digits = 6), ''),
P_value = c(format(PV, digits = 6), ''), row.names = c("Model", "Error"))
result
}
# Ajuste del modelo de RLM
modelo=lm(DPERM~EDAD+RINF+RRC+RRX+NCAMAS+PDP+NENFERM+FSD)
summary(modelo)
# ANOVA
myAnova(modelo)
# Ajuste del modelo de RLM
modelo=lm(DPERM~EDAD+RINF+RRC+RRX+NCAMAS+PDP+NENFERM+FSD)
summary(modelo)
# ANOVA
myAnova(modelo)
# ANOVA
myAnova(modelo_final)
```{r, echo=FALSE}
miscoeficientes(modelo_final,datar)
qt(1-0.05/2,71)
qt(1-0.05/2,75)
miscoeficientes(modelo,data)
wo_ai_ni=anova(modelo_final)
wo_ai_ni["Sum Sq"]
smith2 = Anova(modelo_final)
smith2[1]
residualPlots(modelo_final,tests=FALSE,type="rstudent",quadratic=FALSE,col=4,cex=1.0)
residualPlots(modelo_final,tests=FALSE,type="rstudent",quadratic=FALSE,col=4,cex=1.0)
test=shapiro.test(rstudent(modelo)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo),cex=2)
test=shapiro.test(rstudent(modelo)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo),cex=2)
qqline(rstudent(modelo),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
test=shapiro.test(rstudent(modelo_final)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo_final),cex=2)
qqline(rstudent(modelo_final),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
2(5/80)
2*(5/80)
2*(9/80)^0.5
3*(9/80)
3*(5/80)
2*(5/80)^0.5
3*(5/80)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
2(5/78)
2*(5/78)
2*(5/78)
2*(5/78)^0.5
3*5/78
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
View(datar)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo$residuals, 4)
#res.stud
ei <- round(rstandard(modelo), 4)
##rstudent
ri <- round(rstudent(modelo), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo), 4)
# Dffits
Dffits <- round(dffits(modelo), 4)
##covaratio
Covratio <- round(covratio(modelo), 4)
##dfbetas
Dfbetas<- dfbeta(modelo)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
datar.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio, datar)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
##dfbetas
Dfbetas<- dfbeta(modelo_final)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
length(se.yhat)
length(residuals)
length(ei)
length(ri)
length(Cooks.D)
length(hii.value)
length( Dffits)
length(Covratio)
length(Dfbetas)
View(Dfbetas)
View(Dfbetas)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, hii.value)
Y = DPERM,
Y = DPERM
length(Y = DPERM,)
length(Y = DPERM)
length(DPERM)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar(Y = DPERM), ri, ei, se.yhat, residuals, hii.value)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar[Y = DPERM], ri, ei, se.yhat, residuals, hii.value)
View(datar)
datar=data[-c(19:20),]
modelor=lm(DPERM~EDAD+RINF+RRC+RRX+NCAMAS+PDP+NENFERM+FSD,data = datar)
summary(modelor)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar[Y = DPERM], ri, ei, se.yhat, residuals, hii.value)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar(DPERM), ri, ei, se.yhat, residuals, hii.value)
datar(DPERM)
datar(1)
datar[DPERM]
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar$DPERM, ri, ei, se.yhat, residuals, hii.value)
$\widehat\beta_7 = -0.007527$ indica que por cada unidad de aumento en el numero de enfermeras el promedio de la longitud de permanencia disminuye  en 0.007527 unidades, cuando las demás variables predictoras se mantienen fijas.
2*5/78
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar$DPERM,ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
hii.value>0.1282051
hii.value>0.128
length(hii.value>0.128)
hii.value>0.128
fuck = data.frame(datar$DPERM,ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
View(fuck)
Dffits>0.5063697
Dffits>0.50
Covratio-1
Covratio-1>0.192
Covratio-1>0.1923077
dig_final =infIndexPlot(modelo_final,col=blues9)
Covratio-1>3*5/78
jhs =infIndexPlot(modelo,col=blues9)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo$residuals, 4)
#res.stud
ei <- round(rstandard(modelo), 4)
##rstudent
ri <- round(rstudent(modelo), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo), 4)
# Dffits
Dffits <- round(dffits(modelo), 4)
##covaratio
Covratio <- round(covratio(modelo), 4)
##dfbetas
Dfbetas<- dfbeta(modelo)
# Tabla de diagnósticos
data.frame(Y = DPERM, ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
# Cálculo de errores estándar de los valores ajustados
se.yhat <- predict(modelo_final, se.fit = T)$se.fit
# Residuales crudos del modelo
residuals <- round(modelo_final$residuals, 4)
#res.stud
ei <- round(rstandard(modelo_final), 4)
##rstudent
ri <- round(rstudent(modelo_final), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo_final), 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo_final), 4)
# Dffits
Dffits <- round(dffits(modelo_final), 4)
##covaratio
Covratio <- round(covratio(modelo_final), 4)
# Tabla de diagnósticos
data.frame(datar$DPERM,ri, ei, se.yhat, residuals, Cooks.D, hii.value, Dffits, Covratio)
Cooks.D>1
dig_final =infIndexPlot(modelo_final,col=blues9)
dig_final =infIndexPlot(modelo_final)
dig_final =infIndexPlot(modelo_final)
dig_final =infIndexPlot(modelo_final)
influencePlot(modelo,xlim=c(0,1),ylim=c(-6.0,4.5),col=blues9)
influencePlot(modelo,xlim=c(0,1),ylim=c(-6.0,4.5),col=blues9)
influencePlot(modelo,xlim=c(0,1),ylim=c(-6.0,4.5),col=blues)
influencePlot(modelo,xlim=c(0,1),ylim=c(-6.0,4.5),col=blues9)
influencePlot(modelo,xlim=c(0,1),ylim=c(-6.0,4.5))
influencePlot(modelo_final,xlim=c(0,1),ylim=c(-6.0,4.5))
datar
view(datar)
View(datar)
jhs =infIndexPlot(modelo)
hii.value>0.12
Dffits> 0.506
abs(Dffits)> 0.506
abs(Dffits)
abs(Dffits)> 0.506
Covratio-1>3*5/78
abs(Covratio-1)>3*5/78
necesito = abs(Covratio-1)
View(necesito)
nan = data.frame(necesito)
nana = data.frame(necesito)
View(nana)
data_final=datar[-c(49),]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelor)
test=shapiro.test(rstudent(modelo_final)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo_final),cex=2)
qqline(rstudent(modelo_final),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
data_final=datar[-c(49),]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
test=shapiro.test(rstudent(modelo_final)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo_super_final),cex=2)
qqline(rstudent(modelo_super_final),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
datar[2]
View(datar)
datar[2:1]
nose=datar[-c(7)]
View(nose)
datar[-c(7)]
nose[-3]
nose[-3,]
data_final=datar[-49,]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
View(datar)
View(datar)
data=read.table(file.choose(),header=T,sep=";",dec=",",
colClasses=c(rep("numeric",7),"factor",rep("numeric",3),"factor"))
data$REGION <- NULL
data$AEM <- NULL
data$ID <- NULL
attach(data)
View(data)
attach(data)
datar=data[-c(19:20),]
modelor=lm(DPERM~EDAD+RINF+RRC+RRX+NCAMAS+PDP+NENFERM+FSD,data = datar)
summary(modelor)
View(datar)
View(datar)
data_final= datar[-49,]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
data_final= data[-19,-20,-49]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
data_final= data[-19,-20,-49]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
data_final= data[-c(19,20,49)]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
data_final= data[-c(19,20,49)]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
data_final= data[-c(19,20,49)]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
length(data_final$EDAD)
data[-c(19,20,49)]
data[-19]
data[-19,]
data_final= data[-c(19,20,49,)]
data_final= data[-c(19,20,49),]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
View(data_final)
data_final= data[-c(19,20,49),]
modelo_super_final=lm(DPERM~EDAD+RINF+RRX+PDP,data = data_final)
summary(modelo_super_final)
test=shapiro.test(rstudent(modelo_final)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo_super_final),cex=2)
qqline(rstudent(modelo_super_final),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
test=shapiro.test(rstudent(modelo_final)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo_super_final),cex=2)
qqline(rstudent(modelo_super_final),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
test=shapiro.test(rstudent(modelo_super_final)) #Test de normalidad sobre residuales estudentizados
qqnorm(rstudent(modelo_super_final),cex=2)
qqline(rstudent(modelo_super_final),col=4)
legend("topleft",legend=rbind(c("Statistic W","p.value"),round(c(test$statistic,test$p.value),digits=5)),cex=1.2)
summary(modelo_final)
cor(data_final)
View(datar)
vif(modelo_super_final)
knitr::opts_chunk$set(error = TRUE)
Ind=colldiag(modelo_super_final,center=TRUE)
X=model.matrix(modelo_super_final)[,-1]
val.prop=prcomp(X,center=TRUE,scale=TRUE)$sdev^2
resul=data.frame(Val.propio=val.prop,Ind.Cond=Ind$condindx,Pi=Ind$pi)
resul
ols_step_forward_p(modelo_super_final, penter = 0.05 )
ols_step_forward_p(modelo_super_final, penter = 0.05 )
ols_step_both_p(modelo_super_final,pent = 0.05,prem = 0.05)
